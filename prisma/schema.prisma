// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../ERD.svg"
}

model Laboratory {
  id        String   @id @default(uuid())
  name      String   @unique
  nickname  String?
  cgc       String?
  IE        String?
  IM        String?
  email     String?
  phone     String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Unit      Unit[]

  @@map("laboratories")
}

model Unit {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  address   String?
  number    String?
  district  String?
  city      String?
  state     String?
  zipCode   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Laboratory   Laboratory   @relation(fields: [laboratoryId], references: [id])
  laboratoryId String
  Employee     Employee[]
  Department   Department[]

  @@map("units")
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Unit      Unit?      @relation(fields: [unitId], references: [id])
  unitId    Int?
  Employee  Employee[]

  @@map("departments")
}

model Employee {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  phone            String?
  status           EmployeeStatus     @default(EXPERIENCE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  unit             Unit               @relation(fields: [unitId], references: [id])
  unitId           Int
  Department       Department         @relation(fields: [departmentId], references: [id])
  departmentId     Int
  JobTitle         JobTitle?          @relation(fields: [jobTitleId], references: [id])
  jobTitleId       Int?
  EmployeeDocument EmployeeDocument[]

  @@map("employees")
}

enum EmployeeStatus {
  ACTIVE
  EXPERIENCE
  INACTIVE
}

model EmployeeDocument {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  url        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int

  @@map("employee_documents")
}

model JobTitle {
  id            Int          @id @default(autoincrement())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Employee      Employee[]
  JobCategory   JobCategory? @relation(fields: [jobCategoryId], references: [id])
  jobCategoryId Int?

  @@map("job_titles")
}

model JobCategory {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  JobTitle  JobTitle[]

  @@map("job_categories")
}
